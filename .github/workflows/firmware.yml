name: Firmware Checks

on:
  push:
    paths:
      - 'firmware/**'
      - '.github/workflows/firmware.yml'
  pull_request:
    types: [ready_for_review, review_requested]
  pull_request_review:
    types: [submitted]
  milestone:
    types: [opened, deleted]
  workflow_dispatch:
    inputs:
      git-ref:
        description: 'Git ref (optional)'
        required: false

defaults:
  run:
    working-directory: firmware/ventilator-controller-stm32

jobs:
  format:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v1
      name: Checkout repository

    - name: Install dependencies
      run: |
        sudo apt-get install clang-format

    - name: Run clang-format
      run: |
        ! ./clang-format-all.sh -dry-run 2>&1 | grep ''

  cppcheck:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v1

    - name: Install dependencies
      run: |
        sudo apt-get install cppcheck

    - name: Run cppcheck with application
      run: |
        mkdir application-cppcheck-build-dir
        cppcheck --project=application.cppcheck --inline-suppr --enable=all --error-exitcode=1

  build-firmware:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build-type: [Debug, Release]

    steps:
    - uses: actions/checkout@v1

    - name: Install dependencies
      run: |
        sudo apt-get install gcc-arm-none-eabi cmake

    - name: Run CMake
      run: |
        ./cmake.sh ${{ matrix.build-type }}

    - name: Run make
      run: |
        cd cmake-build-`echo ${{ matrix.build-type }} | awk '{print tolower($0)}'`
        make -j2

    - name: Archive binary
      uses: actions/upload-artifact@v2
      with:
        name: firmware-binary
        path: firmware/ventilator-controller-stm32/cmake-build-debug/*

  scan-build:
    runs-on: ubuntu-20.04
    strategy:
      matrix:
        build-type: [Debug, Release, TestCatch2]

    steps:
    - uses: actions/checkout@v1

    - name: Install dependencies
      run: |
        sudo apt-get install gcc-arm-none-eabi cmake
        sudo apt-get install -y lcov
        sudo apt-get remove -y libllvm10
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository -y -s 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main'
        sudo apt-get update
        sudo apt-get install clang-tools

    - name: Run CMake
      run: |
        ./cmake.sh ${{ matrix.build-type }}

    - name: Run scan-build
      run: |
        cd cmake-build-`echo ${{ matrix.build-type }} | awk '{print tolower($0)}'`
        scan-build make -j2

  clang-tidy:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v1

    - name: Install dependencies
      run: |
        sudo apt-get install gcc-arm-none-eabi cmake
        sudo apt-get remove -y libllvm10
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository -y -s 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main'
        sudo apt-get update
        sudo apt-get install clang-tidy

    - name: Run CMake
      run: |
        ./cmake.sh Clang /usr/lib /usr/bin

    - name: Run clang-tidy
      run: |
        ./clang-tidy-all.sh Clang

  catch2-clang-tidy:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v1

    - name: Install dependencies
      run: |
        sudo apt-get install gcc-arm-none-eabi cmake
        sudo apt-get install -y lcov
        sudo apt-get remove -y libllvm10
        wget -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add -
        sudo add-apt-repository -y -s 'deb http://apt.llvm.org/focal/ llvm-toolchain-focal-10 main'
        sudo apt-get update
        sudo apt-get install clang-tidy

    - name: Run CMake for Catch2 tests
      run: |
        ./cmake.sh TestCatch2

    - name: Run clang-tidy for Catch2 tests

      run: |
        ./clang-tidy-all.sh TestCatch2

  catch2:
    runs-on: ubuntu-20.04

    steps:
    - uses: actions/checkout@v1

    - name: Install dependencies
      run: |
        sudo apt-get install cmake
        sudo apt-get install -y lcov

    - name: Run CMake
      run: |
        ./cmake.sh TestCatch2

    - name: Run make
      run: |
        cd cmake-build-testcatch2
        make -j2

    - name: Run Catch2 tests
      run: |
        cd cmake-build-testcatch2
        ./TestCatch2
